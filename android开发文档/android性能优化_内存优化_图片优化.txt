 Android高效加载大图、多图解决方案，有效避免程序OOM
 http://blog.csdn.net/guolin_blog/article/details/9316683
 http://blog.csdn.net/guolin_blog/article/details/9526203
 
 我们可以通过下面的代码看出每个应用程序最高可用内存是多少。
 int maxMemory = (int) (Runtime.getRuntime().maxMemory() / 1024);  
Log.d("TAG", "Max memory is " + maxMemory + "KB");  

BitmapFactory.Options options = new BitmapFactory.Options();  
options.inJustDecodeBounds = true;  
BitmapFactory.decodeResource(getResources(), R.id.myimage, options);  
int imageHeight = options.outHeight;  
int imageWidth = options.outWidth;  
String imageType = options.outMimeType;  


[java] view plain copy
public static int calculateInSampleSize(BitmapFactory.Options options,  
        int reqWidth, int reqHeight) {  
    // 源图片的高度和宽度  
    final int height = options.outHeight;  
    final int width = options.outWidth;  
    int inSampleSize = 1;  
    if (height > reqHeight || width > reqWidth) {  
        // 计算出实际宽高和目标宽高的比率  
        final int heightRatio = Math.round((float) height / (float) reqHeight);  
        final int widthRatio = Math.round((float) width / (float) reqWidth);  
        // 选择宽和高中最小的比率作为inSampleSize的值，这样可以保证最终图片的宽和高  
        // 一定都会大于等于目标的宽和高。  
        inSampleSize = heightRatio < widthRatio ? heightRatio : widthRatio;  
    }  
    return inSampleSize;  
}  



使用这个方法，首先你要将BitmapFactory.Options的inJustDecodeBounds属性设置为true，解析一次图片。然后将BitmapFactory.Options连同期望的宽度和高度一起传递到到calculateInSampleSize方法中，就可以得到合适的inSampleSize值了。之后再解析一次图片，使用新获取到的inSampleSize值，并把inJustDecodeBounds设置为false，就可以得到压缩后的图片了。
[java] view plain copy
public static Bitmap decodeSampledBitmapFromResource(Resources res, int resId,  
        int reqWidth, int reqHeight) {  
    // 第一次解析将inJustDecodeBounds设置为true，来获取图片大小  
    final BitmapFactory.Options options = new BitmapFactory.Options();  
    options.inJustDecodeBounds = true;  
    BitmapFactory.decodeResource(res, resId, options);  
    // 调用上面定义的方法计算inSampleSize值  
    options.inSampleSize = calculateInSampleSize(options, reqWidth, reqHeight);  
    // 使用获取到的inSampleSize值再次解析图片  
    options.inJustDecodeBounds = false;  
    return BitmapFactory.decodeResource(res, resId, options);  
}  
下面的代码非常简单地将任意一张图片压缩成100*100的缩略图，并在ImageView上展示。
[java] view plain copy
mImageView.setImageBitmap(  
    decodeSampledBitmapFromResource(getResources(), R.id.myimage, 100, 100));  
	
	
使用图片缓存技术



[java] view plain copy
private LruCache<String, Bitmap> mMemoryCache;  
  
@Override  
protected void onCreate(Bundle savedInstanceState) {  
    // 获取到可用内存的最大值，使用内存超出这个值会引起OutOfMemory异常。  
    // LruCache通过构造函数传入缓存值，以KB为单位。  
    int maxMemory = (int) (Runtime.getRuntime().maxMemory() / 1024);  
    // 使用最大可用内存值的1/8作为缓存的大小。  
    int cacheSize = maxMemory / 8;  
    mMemoryCache = new LruCache<String, Bitmap>(cacheSize) {  
        @Override  
        protected int sizeOf(String key, Bitmap bitmap) {  
            // 重写此方法来衡量每张图片的大小，默认返回图片数量。  
            return bitmap.getByteCount() / 1024;  
        }  
    };  
}  
  
public void addBitmapToMemoryCache(String key, Bitmap bitmap) {  
    if (getBitmapFromMemCache(key) == null) {  
        mMemoryCache.put(key, bitmap);  
    }  
}  
  
public Bitmap getBitmapFromMemCache(String key) {  
    return mMemoryCache.get(key);  
}  
在这个例子当中，使用了系统分配给应用程序的八分之一内存来作为缓存大小。在中高配置的手机当中，这大概会有4兆(32/8)的缓存空间。一个全屏幕的 GridView 使用4张 800x480分辨率的图片来填充，则大概会占用1.5兆的空间(800*480*4)。因此，这个缓存大小可以存储2.5页的图片。
当向 ImageView 中加载一张图片时,首先会在 LruCache 的缓存中进行检查。如果找到了相应的键值，则会立刻更新ImageView ，否则开启一个后台线程来加载这张图片。
[java] view plain copy
public void loadBitmap(int resId, ImageView imageView) {  
    final String imageKey = String.valueOf(resId);  
    final Bitmap bitmap = getBitmapFromMemCache(imageKey);  
    if (bitmap != null) {  
        imageView.setImageBitmap(bitmap);  
    } else {  
        imageView.setImageResource(R.drawable.image_placeholder);  
        BitmapWorkerTask task = new BitmapWorkerTask(imageView);  
        task.execute(resId);  
    }  
}  
BitmapWorkerTask 还要把新加载的图片的键值对放到缓存中。
[java] view plain copy
class BitmapWorkerTask extends AsyncTask<Integer, Void, Bitmap> {  
    // 在后台加载图片。  
    @Override  
    protected Bitmap doInBackground(Integer... params) {  
        final Bitmap bitmap = decodeSampledBitmapFromResource(  
                getResources(), params[0], 100, 100);  
        addBitmapToMemoryCache(String.valueOf(params[0]), bitmap);  
        return bitmap;  
    }  
}  


什么是ViewStub?

ViewStub其实本质上也是一个View


ViewStub使用的是惰性加载的方式，即使将其放置于布局文件中，如果没有进行加载那就为空，不像其它控件一样只要布局文件中声明就会存在。 
那ViewStub适用于场景呢？通常用于网络请求页面失败的显示。一般情况下若要实现一个网络请求失败的页面，我们是不是使用两个View呢，一个隐藏，一个显示。
试想一下，如果网络状况良好，并不需要加载失败页面，但是此页面确确实实已经加载完了，无非只是隐藏看不见而已。如果使用ViewStub，在需要的时候才进行加载，不就达到节约内存提高性能的目的了吗？

ViewStub只能加载一次，重复加载会导致异常，这是因为ViewStub只要加载过一次，其自身就会被移除，把并自身所包含的内容全部传给父布局


Android缓存机制Lrucache内存缓存和DiskLruCache磁盘缓存


private static final int CACHE_SIZE = 4 * 1024 * 1024;//4Mib
    LruCache bitmapCache = new LruCache(CACHE_SIZE){
        @Override
        protected int sizeOf(String key, Bitmap value) {
            return value.getByteCount();//自定义Bitmap数据大小的计算方式
        }
    };
	
	
	
new Thread(new Runnable() {  
    @Override  
    public void run() {  
        try {  
            String imageUrl = "http://img.my.csdn.net/uploads/201309/01/1378037235_7476.jpg";  
            String key = hashKeyForDisk(imageUrl);  //MD5对url进行加密，这个主要是为了获得统一的16位字符
            DiskLruCache.Editor editor = mDiskLruCache.edit(key);  //拿到Editor，往journal日志中写入DIRTY记录
            if (editor != null) {  
                OutputStream outputStream = editor.newOutputStream(0);  
                if (downloadUrlToStream(imageUrl, outputStream)) {  //downloadUrlToStream方法为下载图片的方法，并且将输出流放到outputStream
                    editor.commit();  //完成后记得commit()，成功后，再往journal日志中写入CLEAN记录
                } else {  
                    editor.abort();  //失败后，要remove缓存文件，往journal文件中写入REMOVE记录
                }  
            }  
            mDiskLruCache.flush();  //将缓存操作同步到journal日志文件，不一定要在这里就调用
        } catch (IOException e) {  
            e.printStackTrace();  
        }  
    }  
}).start(); 



android 性能优化

移动端网络优化
一、连接服务器优化策略
1. 不用域名，用 IP 直连
省去 DNS 解析过程，DNS 全名 Domain Name System，解析意指根据域名得到其对应的 IP 地址。 如 http://www.codekk.com 的域名解析结果就是 104.236.147.76。
 
首次域名解析一般需要几百毫秒，可通过直接向 IP 而非域名请求，节省掉这部分时间，同时可以预防域名劫持等带来的风险。
 
当然为了安全和扩展考虑，这个 IP 可能是一个动态更新的 IP 列表，并在 IP 不可用情况下通过域名访问。
 
2. 服务器合理部署
服务器多运营商多地部署，一般至少含三大运营商、南中北三地部署。
 
配合上面说到的动态 IP 列表，支持优先级，每次根据地域、网络类型等选择最优的服务器 IP 进行连接。
 
对于服务器端还可以调优服务器的 TCP 拥塞窗口大小、重传超时时间(RTO)、最大传输单元(MTU)等。
 
二、获取数据优化策略
1. 连接复用
节省连接建立时间，如开启 keep-alive。
 
Http 1.1 默认启动了 keep-alive。对于 Android 来说默认情况下 HttpURLConnection 和 HttpClient 都开启了 keep-alive。只是 2.2 之前 HttpURLConnection 存在影响连接池的 Bug，具体可见：Android HttpURLConnection 及 HttpClient 选择
 
2. 请求合并
即将多个请求合并为一个进行请求，比较常见的就是网页中的 CSS Image Sprites。 如果某个页面内请求过多，也可以考虑做一定的请求合并。
 
3. 减小请求数据大小
(1) 对于 POST 请求，Body 可以做 Gzip 压缩，如日志。
 
(2) 对请求头进行压缩
这个 Http 1.1 不支持，SPDY 及 Http 2.0 支持。 Http 1.1 可以通过服务端对前一个请求的请求头进行缓存，后面相同请求头用 md5 之类的 id 来表示即可。
 
4. CDN 缓存静态资源
缓存常见的图片、JS、CSS 等静态资源。
 
5. 减小返回数据大小
(1) 压缩
一般 API 数据使用 Gzip 压缩，下图是之前测试的 Gzip 压缩前后对比图。 android-http-compare
 
(2) 精简数据格式
如 JSON 代替 XML，WebP 代替其他图片格式。关注公众号 codekk，回复 20 查看关于 WebP 的介绍。
 
(3) 对于不同的设备不同网络返回不同的内容 如不同分辨率图片大小。
 
(4) 增量更新
需要数据更新时，可考虑增量更新。如常见的服务端进行 bsdiff，客户端进行 bspatch。
 
(5) 大文件下载
支持断点续传，并缓存 Http Resonse 的 ETag 标识，下次请求时带上，从而确定是否数据改变过，未改变则直接返回 304。
 
6. 数据缓存
缓存获取到的数据，在一定的有效时间内再次请求可以直接从缓存读取数据。
 
关于 Http 缓存规则 Grumoon 在 Volley 源码解析最后杂谈中有详细介绍。
 
三、其他优化手段
这类优化方式在性能优化系列总篇中已经有过完整介绍
1. 预取
包括预连接、预取数据。
 
2. 分优先级、延迟部分请求
将不重要的请求延迟，这样既可以削峰减少并发、又可以和后面类似的请求做合并。
 
3. 多连接
对于较大文件，如大图片、文件下载可考虑多连接。 需要控制请求的最大并发量，毕竟移动端网络受限。
 
四、监控
优化需要通过数据对比才能看出效果，所以监控系统必不可少，通过前后端的数据监控确定调优效果。

性能优化之数据库优化

1、索引   普通索引和唯一性索引    单个索引和复合索引   聚簇索引和非聚簇索引(聚集索引，群集索引)
2，使用事务 
3，异步线程


性能优化之布局优化
1，<include>标签
2，<viewstub>标签
3，<merge>标签,

性能优化之Java(Android)代码优化
这部分包括：缓存、数据存储优化、算法优化、JNI、逻辑优化、需求优化几种优化方式。
(1). 缓存

 2，数据存储优化
 
 
 
 总结一下，优化步骤如下：

移除Window默认的Background
移除XML布局文件中非必需的Background
按需显示占位背景图片


电量优化
Battery Historian
Google提供了一个开源的电池历史数据分析工具 -- Battery Historian.
http://blog.csdn.net/zhaodecang/article/details/53345861
1、在android framework里面有专门负责电量统计的Service：BatteryStatsSerive
①这个Service在ActivityManagerService中创建，代码如下：
mBatteryStatsService = new BatteryStatsService(new File(systemDir, 'batterystats.bin').toString(

2、手机耗电主要原因
在09年GoogleIO大会JeffreySharkey的演讲(Coding for Life — Battery Life,That Is)中就探讨了这个问题，指出android应用的耗电主要在以下三个方面：
①大数据量的传输；
②不停的在网络间切换；
③解析大量的文本数据;
3、并提出了相关的★优化建议★
①在需要网络连接的程序中，首先检查网络连接是否正常，如果没有网络连接，那么就不需要执行相应的程序;
②判断网络类型,针对特定的数据在特定的网络下请求.例如:大量数据传输的时候在wifi下请求;wifi下下载数据耗电量只有2、3、4G的1/3.
③使用效率高的数据格式和解析方法，推荐使用JSON和Protobuf;
④在进行大数据量下载时，尽量使用GZIP方式下载;
⑤使用推送，代替循环请求
⑥其它：
尽量不要使用浮点运算；
回收java对象，特别是较大的java对像，使用reset方法；
主动回收java对象，特别是较大的，例如bitmap。减少GC的工作频率；
避免内存抖动，内存抖动是因为大量的对象被创建又在短时间内马上被释放；
避免在for循环、onDraw方法中创建对象；无法避免的可以创建对象池，然后在不使用的时候释放；
对定位要求不是太高的话尽量不要使用GPS定位，可以使用wifi和移动网络cell定位即可；
获取屏幕尺寸等信息可以使用缓存技术，不需要进行多次请求；
使用AlarmManager来定时启动服务替代使用sleep方式的定时任务；
4、限制APP对电量的影响：
①当没有网络连接的时候，禁用后台服务更新
②当电池电量低的时候减少更新的频率，确保自己的app对电池的影响降到最低
③检查是否在充电

<receiver android:name=".PowerConnectReceiver">
  <intent-filter>
	<action android:name="android.intent.action.ACTION_POWER_CONNECTED"/>
	<action android:name="android.intent.action.ACTION_POWER_DISCONNECTED"/>
  </intent-filter>
</receiver>
public class PowerConnectionReceiver extends BroadcastReceiver {
	@Override
	public void onReceive(Context context, Intent intent) {
		int status = intent.getIntExtra(BatteryManager.EXTRA_STATUS, -1);
		boolean isCharging = status == BatteryManager.BATTERY_STATUS_CHARGING || 
status == BatteryManager.BATTERY_STATUS_FULL;
		int chargeFlag = intent.getIntExtra(BatteryManager.EXTRA_PLUGGED, -1);
		boolean usbCharge = chargeFlag == BATTERY_PLUGGED_USB;
		boolean acCharge = chargeFlag == BATTERY_PLUGGED_AC;
	}
}
//获取程序是否充电
int status = intent.getIntExtra(BatteryManager.EXTRA_STATUS,-1);
boolean isCharging = (status == BatteryManager.BATTERY_STATUS_CHARGING||status == BatteryManager.BATTERY_STATUS_FULL);
// 充电方式，usb还是电源
int chargeFlag = intent.getIntExtra(BatteryManager.EXTRA_PLUGGED, -1);
boolean usbCharge = chargeFlag == BATTERY_PLUGGED_USB;
boolean acCharge = chargeFlag == BATTERY_PLUGGED_AC;
④不断的检测电量也会影响电池的使用时间，我们可以这样做
<receiver android:name=".BatteryLevelReceiver">
     <intent-filter>
		 <action android:name="android.intent.action.ACTION_BATTERY_LOW"/>// 电量过低
		 <action android:name="android.intent.action.ACTION_BATTERY_OKAY"/> 
	 </intent-filter>
</receiver>
5、使用JobScheduler合理分配任务
①JobScheduler 即 任务调度器
②需要先有一个JobService
public class MyJobService extend sJobService {
	private static final String LOG_TAG="MyJobService";
	@Override
	public void onCreate() {
		super.onCreate();
		Log.i(LOG_TAG,"MyJobServicecreated");
	}
	@Override
	public void onDestroy() {
		super.onDestroy();
		Log.i(LOG_TAG,"MyJobServicedestroyed");
	}
	@Override
	public boolean onStartJob(JobParameters params) {
		Log.i(LOG_TAG,"Totallyandcompletelyworkingonjob"+params.getJobId());
		if(isNetworkConnected()) {
			new SimpleDownloadTask().execute(params);
			return true;
		} else {
			Log.i(LOG_TAG,"Noconnectiononjob"+params.getJobId()+";sadface");
		}
		returnfalse;
	}
	@Override
	public boolean onStopJob(JobParameters params) {
		Log.i(LOG_TAG,"Whelp,somethingchanged,soI'mcallingitonjob"+params.getJobId());
		return false;
	}
	private boolean isNetworkConnected() {
		ConnectivityManager  manager = (ConnectivityManager)getSystemService(Context.CONNECTIVITY_SERVICE);
		NetworkInfo  networkInfo = manager.getActiveNetworkInfo();
		return(networkInfo!=null&&networkInfo.isConnected());
	}
}
private class SimpleDownloadTask extends AsyncTask<JobParameters,Void,String> {
	protected JobParameters mJobParam;
	@Override
	protected String doInBackground(JobParameters...params) {
		mJobParam = params[0];
        InputStream is=null;
		try {
			int len=50
			URL url=new URL("https://www.google.com");
			HttpURLConnection conn=(HttpURLConnection)url.openConnection();
			conn.setReadTimeout(10000);//10sec
			conn.setConnectTimeout(15000);//15sec
			conn.setRequestMethod("GET");
			conn.connect();
			int responseCode=conn.getResponseCode();
			Log.d(LOG_TAG,"Theresponseis:"+responseCode);
			is=conn.getInputStream();
			Reader reader = new InputStreamReader(is,"UTF-8");
			char[] buffer=new char[len];
			reader.read(buffer);
			return new String(buffer);
		} catch(IOExceptione) {
			return"Unabletoretrievewebpage.";
		}
	}
	@Override
	protected void onPostExecute(String result) {
		jobFinished(mJobParam,false);
		Log.i(LOG_TAG,result);
	}
}
③然后模拟通过点击Button触发N个任务，交给JobService来处理：
public class FreeTheWakelockActivity extends ActionBarActivity {
	public static final String LOG_TAG="FreeTheWakelockActivity";
	TextView mWakeLockMsg;
	ComponentName mServiceComponent;
	@Override
	protected void onCreate(BundlesavedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_wakelock);
		mWakeLockMsg = (TextView)findViewById(R.id.wakelock_txt);
		mServiceComponent = new ComponentName(this,MyJobService.class);
		Intent startServiceIntent = new Intent(this,MyJobService.class);
		startService(startServiceIntent);
		Button btn = (Button)findViewById(R.id.wakelock_poll);
		btn.setText(R.string.poll_server_button);
		btn.setOnClickListener(new View.OnClickListener() {
			@Override
			publicvoidonClick(Viewv) {
				pollServer();
			}
		});
	}
	public void pollServer() {
		JobScheduler scheduler = (JobScheduler)getSystemService(Context.JOB_SCHEDULER_SERVICE);
		for(int i=0; i<10; i++) {
			JobInfo jobInfo=new JobInfo.Builder(i,mServiceComponent)
				.setMinimumLatency(5000)//5seconds
				.setOverrideDeadline(60000)//60seconds(for brevity in the sample)
				.setRequiredNetworkType(JobInfo.NETWORK_TYPE_ANY)//WiFi or data connections
				.build();
			mWakeLockMsg.append("Schedulingjob"+i+"!n");
			scheduler.schedule(jobInfo);
		}
	}
}

Android App优化之网络优化
https://www.jianshu.com/p/d4c2c62ffc35

Android App优化之提升你的App启动速度之实例挑战
https://www.jianshu.com/p/4f10c9a10ac9
http://blog.lmj.wiki/GithubApp/


android 内存泄漏

[译]Android内存泄漏的八种可能（上）

https://www.jianshu.com/p/ac00e370f83d?hmsr=toutiao.io&utm_medium=toutiao.io&utm_source=toutiao.io


1，静态内部类来代替匿名内部类
Context泄露之谜:Handle & 内部类


public class SampleActivity extends Activity {

  /**
   * Instances of static inner classes do not hold an implicit
   * reference to their outer class.
   */
  private static class MyHandler extends Handler {
    private final WeakReference<SampleActivity> mActivity;

    public MyHandler(SampleActivity activity) {
      mActivity = new WeakReference<SampleActivity>(activity);
    }

    @Override
    public void handleMessage(Message msg) {
      SampleActivity activity = mActivity.get();
      if (activity != null) {
        // ...
      }
    }
  }

  private final MyHandler mHandler = new MyHandler(this);

  /**
   * Instances of anonymous classes do not hold an implicit
   * reference to their outer class when they are "static".
   */
  private static final Runnable sRunnable = new Runnable() {
      @Override
      public void run() { /* ... */ }
  };

  @Override
  protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);

    // Post a message and delay its execution for 10 minutes.
    mHandler.postDelayed(sRunnable, 1000 * 60 * 10);
    
    // Go back to the previous Activity.
    finish();
  }
}

作者：豆沙包67
链接：https://www.jianshu.com/p/63aead89f3b9
來源：简书
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。


一般来说，内存泄漏都是因为泄漏对象的引用被传递到该对象的范围之外，或者说内存泄漏是因为持有对象的长期引用，导致对象无法被 GC 回收。为了避免这种情况，我们可以选择在对象生命周期结束的时候，解除绑定，将引用置为空，或者使用弱引用。

由于 Context 导致内存泄漏。使用 Application Context 代替 Activity Context，避免长期持有 Context 的引用，引用应该和 Context 自身的生命周期保持一致。
由于非静态内部类、匿名内部类导致内存泄。它们会隐式的持有外部类的引用，一不小心长期持有该引用就会导致内存泄漏，使用静态内部类来代替它们。
Handler 导致内存泄漏。原因和第二点一样，同样使用静态内部类的实现方式，同时对需要引用的对象/资源采用弱引用的方式。
EventBus导致内存泄漏。EventBus 的单例特性，会长期持有注册对象的引用，一定要在对象生命周期结束的时候，接触注册，释放引用。同样对于系统提供的一些成对出现的方法，我们也需要成对的调用，例如 BroadcastReceiver 的 registerReceiver( ) 方法和 unRegisterReceiver( ) 方法。
线程导致内存泄漏。我们经常会执行一些长期运行的任务，避免在这些任务中持有 Activity 对象的引用，如果持有了引用的话，我们应该在对象生命周期结束的时候，释放引用。

作者：realxz
链接：https://www.jianshu.com/p/be89ac5df3f9
來源：简书
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。

https://www.cnblogs.com/zhaoyanjun/p/5981386.html


1、新建线程引起的Activity内存泄漏
Runnable改为静态非匿名内部类即可。

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
package rxnet.zyj.com.myapplication;
 
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.view.View;
 
public class Activity6 extends AppCompatActivity {
 
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_6);
 
        findViewById( R.id.finish).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                finish();
            }
        });
 
        new Thread( new MyRunnable()).start();
 
    }
 
    private static class MyRunnable implements Runnable {
 
        @Override
        public void run() {
            try {
                Thread.sleep( 15000 );
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }
     


handler.removeCallbacksAndMessages( null );	 


自定义静态AsyncTask类
AsyncTask的周期和Activity周期保持一致。也就是在Activity生命周期结束时要将AsyncTask cancel掉。
 

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
package rxnet.zyj.com.myapplication;
 
import android.os.AsyncTask;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.view.View;
 
public class AsyncTaskActivity extends AppCompatActivity {
 
    private static MyTask myTask ;
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_asynctask);
 
        findViewById( R.id.finish).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                finish();
            }
        });
 
        myTask = new MyTask() ;
        myTask.executeOnExecutor( AsyncTask.THREAD_POOL_EXECUTOR , "") ;
 
    }
 
    private static class MyTask extends AsyncTask{
 
        @Override
        protected Object doInBackground(Object[] params) {
            try {
                //模拟耗时操作
                Thread.sleep( 15000 );
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            return "";
        }
    }
 
    @Override
    protected void onDestroy() {
        super.onDestroy();
 
        //取消异步任务
        if ( myTask != null ){
            myTask.cancel(true ) ;
        }
    }
}

https://www.cnblogs.com/lipeineng/p/5829848.html

Android 内存泄漏的一些情况。
1. 静态 Activity

2. 静态 View

3. 非静态内部类

4. 匿名类

5. Handler

6. Thread

7. TimerTask

8. SensorManager

 

1.资源对象没关闭造成的内存泄漏

2.构造Adapter时，没有使用缓存的convertView

3.Bitmap对象不在使用时调用recycle()释放内存

4.试着使用关于application的context来替代和activity相关的context

5.注册没取消造成的内存泄漏

6.集合中对象没清理造成的内存泄漏



